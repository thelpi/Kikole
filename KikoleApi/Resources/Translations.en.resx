<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlreadyExistsAccount" xml:space="preserve">
    <value>A account already exists with this login</value>
  </data>
  <data name="BothAcceptedAndCancelledChallenge" xml:space="preserve">
    <value>Challenge both accepted and refused</value>
  </data>
  <data name="CantAutoAcceptChallenge" xml:space="preserve">
    <value>Can't accept your own challenge</value>
  </data>
  <data name="CantChallengeYourself" xml:space="preserve">
    <value>You can't challenge yourself</value>
  </data>
  <data name="ChallengeAlreadyAccepted" xml:space="preserve">
    <value>You can't cancel an accepted challenge</value>
  </data>
  <data name="ChallengeAlreadyAnswered" xml:space="preserve">
    <value>You've already respond to this challenge</value>
  </data>
  <data name="ChallengeAlreadyExist" xml:space="preserve">
    <value>Can't create challenge; a challenge against this opponent is already planned or requested</value>
  </data>
  <data name="ChallengeCreatorIsAdmin" xml:space="preserve">
    <value>Can't create challenge; you're administrator</value>
  </data>
  <data name="ChallengeHostIsInvalid" xml:space="preserve">
    <value>Invalid host account</value>
  </data>
  <data name="ChallengeNotFound" xml:space="preserve">
    <value>Challenge not found</value>
  </data>
  <data name="ChallengeOpponentIsAdmin" xml:space="preserve">
    <value>Can't create challenge; opponent account is administrator</value>
  </data>
  <data name="ChallengeOpponentIsInvalid" xml:space="preserve">
    <value>Can't create challenge; invalid opponent account</value>
  </data>
  <data name="ClubCreationFailure" xml:space="preserve">
    <value>Club creation failure</value>
  </data>
  <data name="ClueAvailable" xml:space="preserve">
    <value>A new clue is available</value>
  </data>
  <data name="EmptyClubsList" xml:space="preserve">
    <value>Empty clubs list</value>
  </data>
  <data name="InvalidAllowedNames" xml:space="preserve">
    <value>Invalid allowed names</value>
  </data>
  <data name="InvalidBirthYear" xml:space="preserve">
    <value>Invalid year of birth</value>
  </data>
  <data name="InvalidChallengeId" xml:space="preserve">
    <value>Invalid challenge identifier</value>
  </data>
  <data name="InvalidClubs" xml:space="preserve">
    <value>At least one invalid club</value>
  </data>
  <data name="InvalidClue" xml:space="preserve">
    <value>Invalid clue</value>
  </data>
  <data name="InvalidCountry" xml:space="preserve">
    <value>Invalid country</value>
  </data>
  <data name="InvalidDate" xml:space="preserve">
    <value>Invalid date</value>
  </data>
  <data name="InvalidDateRange" xml:space="preserve">
    <value>Start/End dates are invalid or inconsistent</value>
  </data>
  <data name="InvalidGuestUserId" xml:space="preserve">
    <value>Invalid guest identifier</value>
  </data>
  <data name="InvalidLanguage" xml:space="preserve">
    <value>Invalid language</value>
  </data>
  <data name="InvalidLogin" xml:space="preserve">
    <value>Invalid login</value>
  </data>
  <data name="InvalidName" xml:space="preserve">
    <value>Invalid name</value>
  </data>
  <data name="InvalidOpponentAccount" xml:space="preserve">
    <value>Opponent is an invalid account</value>
  </data>
  <data name="InvalidPassword" xml:space="preserve">
    <value>Invalid password</value>
  </data>
  <data name="InvalidPlayerId" xml:space="preserve">
    <value>Invalid player identifier</value>
  </data>
  <data name="InvalidPointsRate" xml:space="preserve">
    <value>Invalid points rate</value>
  </data>
  <data name="InvalidPosition" xml:space="preserve">
    <value>Invalid position</value>
  </data>
  <data name="InvalidProposalDate" xml:space="preserve">
    <value>Invalid proposal date</value>
  </data>
  <data name="InvalidQOrA" xml:space="preserve">
    <value>Invalid question or answer</value>
  </data>
  <data name="InvalidRequest" xml:space="preserve">
    <value>Invalid request: {0}</value>
  </data>
  <data name="InvalidSortType" xml:space="preserve">
    <value>Invalid sort type</value>
  </data>
  <data name="InvalidUser" xml:space="preserve">
    <value>Invalid user</value>
  </data>
  <data name="InvalidValue" xml:space="preserve">
    <value>Invalid value</value>
  </data>
  <data name="PasswordDoesNotMatch" xml:space="preserve">
    <value>The password doesn't match</value>
  </data>
  <data name="PlayerCreationFailure" xml:space="preserve">
    <value>Player creation failure</value>
  </data>
  <data name="PlayerDoesNotExist" xml:space="preserve">
    <value>The player doesn't exist</value>
  </data>
  <data name="RefusalWithoutReason" xml:space="preserve">
    <value>Refusal reason not specified</value>
  </data>
  <data name="RejectAndProposalDateCombined" xml:space="preserve">
    <value>Unable to set both reject date and proposal date</value>
  </data>
  <data name="ResetPasswordError" xml:space="preserve">
    <value>Error while reseting the password</value>
  </data>
  <data name="SuccessCountSortForbidden" xml:space="preserve">
    <value>Can't sort by success count</value>
  </data>
  <data name="TipOlderPlayer" xml:space="preserve">
    <value>The player is older</value>
  </data>
  <data name="TipYoungerPlayer" xml:space="preserve">
    <value>The player is younger</value>
  </data>
  <data name="UserCreationFailure" xml:space="preserve">
    <value>User creation failure</value>
  </data>
  <data name="UserDoesNotExist" xml:space="preserve">
    <value>The user doesn't exist</value>
  </data>
</root>