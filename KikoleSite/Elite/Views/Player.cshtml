@model KikoleSite.Elite.ViewDatas.PlayerViewData

@{
    var gameId = (int)Model.Game;
    var loaderSize = 80;
    var loaderMargin = $"-{(loaderSize / 2)}px";
}

<button type="button" class="collapsible">General information</button>
<div class="collapsiblecontent" style="display: block">
    <div class="formBlock">
        <label class="formLabel">Real name:</label>
        <label style="color: @Model.Color">@Model.RealName</label>
    </div>
    <div class="formBlock">
        <label class="formLabel">Surname:</label>
        <label style="color: @Model.Color">@Model.SurName</label>
    </div>
    <div class="formBlock">
        <label class="formLabel">Country:</label>
        <label>@Model.Country</label>
    </div>
    <div class="formBlock">
        <label class="formLabel">First activity date:</label>
        @{ 
            var dateText = Model.JoinDate?.ToString("yyyy-MM-dd") ?? "N/A";
        }
        <label>@dateText</label>
    </div>
    <div class="formBlock">
        <label class="formLabel">Last activity date:</label>
        @{
            dateText = Model.LastActivityDate?.ToString("yyyy-MM-dd") ?? "N/A";
        }
        <label>@dateText</label>
    </div>
</div>

<button type="button" class="collapsible">Ranking highlights</button>
<div class="collapsiblecontent" style="display: none">
    <div class="formBlock2" id="whileLoadingBlock">
        <p>The ranking generation takes between a few seconds and few minutes. Use this button to know if it's done, it will refresh the section automatically:</p>
        <br />
        <input type="submit" value="Refresh" id="refreshDataSubmit" />
    </div>
    <div class="formBlock" id="bestPointsRanking">
        <label class="formLabel">Best points ranking:</label>
    </div>
    <div class="formBlock" id="bestTimeRanking">
        <label class="formLabel">Best time ranking:</label>
    </div>
    <div class="formBlock2" id="highlights">
        <table class="dual-box" id="pointsHighlights">
            <tbody>
                <tr>
                    <th colspan="2">Points highlights</th>
                </tr>
                <tr>
                    <th>Date</th>
                    <th>Points</th>
                </tr>
            </tbody>
        </table>
        <table class="dual-box last" id="rankHighlights">
            <tbody>
                <tr>
                    <th colspan="2">Rank highlights</th>
                </tr>
                <tr>
                    <th>Date</th>
                    <th>Rank</th>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="formBlock3" id="rankingHistory"></div>
</div>

<button type="button" class="collapsible">Untied world records</button>
<div class="collapsiblecontent" style="display: none">
    @if (Model.WorldRecords.UntiedWorldRecords?.Count > 0)
    {
        await Html.RenderPartialAsync("~/Elite/Views/LongestStanding.cshtml", new KikoleSite.Elite.ViewDatas.LongestStandingViewData { Standings = Model.WorldRecords.UntiedWorldRecords }).ConfigureAwait(false);
    }
    else
    {
        <label>No untied world record!</label>
    }
</div>

<button type="button" class="collapsible">Untied world records slayed</button>
<div class="collapsiblecontent" style="display: none">
    @if (Model.WorldRecords.UntiedSlayWorldRecords?.Count > 0)
    {
        await Html.RenderPartialAsync("~/Elite/Views/LongestStanding.cshtml", new KikoleSite.Elite.ViewDatas.LongestStandingViewData { Standings = Model.WorldRecords.UntiedSlayWorldRecords }).ConfigureAwait(false);
    }
    else
    {
        <label>No untied world record slayed!</label>
    }
</div>

<button type="button" class="collapsible">World records slayed</button>
<div class="collapsiblecontent" style="display: none">
    @if (Model.WorldRecords.SlayWorldRecords?.Count > 0)
    {
        await Html.RenderPartialAsync("~/Elite/Views/LongestStanding.cshtml", new KikoleSite.Elite.ViewDatas.LongestStandingViewData { Standings = Model.WorldRecords.SlayWorldRecords }).ConfigureAwait(false);
    }
    else
    {
        <label>No slayed world record!</label>
    }
</div>

<button type="button" class="collapsible">All world records</button>
<div class="collapsiblecontent" style="display: none">
    @if (Model.WorldRecords.WorldRecords?.Count > 0)
    {
        await Html.RenderPartialAsync("~/Elite/Views/LongestStanding.cshtml", new KikoleSite.Elite.ViewDatas.LongestStandingViewData { Standings = Model.WorldRecords.WorldRecords }).ConfigureAwait(false);
    }
    else
    {
        <label>No world record!</label>
    }
</div>

<style>
    .formLabel {
        width: 120px;
        display: inline-block;
        text-align: right;
        margin-right: 5px;
    }

    .formBlock {
        margin-top: 5px;
        margin-bottom: 5px;
        height: 20px;
    }

    .formBlock2 {
        margin-top: 5px;
        margin-bottom: 5px;
    }

    .formBlock3 {
        margin-top: 5px;
        margin-bottom: 5px;
        float: left;
    }

    /* Style the button that is used to open and close the collapsible content */
    .collapsible {
        cursor: pointer;
        padding: 5px;
        margin-top: 5px;
        margin-bottom: 5px;
        width: 100%;
        border: none;
        text-align: left;
        outline: none;
        font-size: 12px;
        color: white;
        background-color: #333;
    }

    /* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
    .active, .collapsible:hover {
        background-color: #808080;
    }

    /* Style the collapsible content. Note: hidden by default */
    .collapsiblecontent {
        padding: 0 5px;
        display: none;
        overflow: hidden;
    }
</style>

<script src="https://www.gstatic.com/charts/loader.js"></script>
<script>
    $(document).ready(function () {
        var coll = document.getElementsByClassName("collapsible");
        for (var i = 0; i < coll.length; i++) {
            coll[i].addEventListener("click", function () {
                this.classList.toggle("active");
                var content = this.nextElementSibling;
                if (content.style.display === "block") {
                    content.style.display = "none";
                } else {
                    content.style.display = "block";
                    var otherCols = document.getElementsByClassName("collapsible");
                    for (var j = 0; j < otherCols.length; j++) {
                        if (otherCols[j] != this) {
                            if (otherCols[j].classList.contains("active")) {
                                otherCols[j].classList.toggle("active");
                            }
                            otherCols[j].nextElementSibling.style.display = "none";
                        }
                    }
                }
            });
        }
        var toYyyyMmDd = function (data) {
            var realDate = new Date(data);
            var mm = realDate.getMonth() + 1;
            var dd = realDate.getDate();
            return [
                realDate.getFullYear(),
                (mm > 9 ? '' : '0') + mm,
                (dd > 9 ? '' : '0') + dd
            ].join('-');
        };
        var toRank = function (data) {
            if (data == 1)
                return data + 'st';
            else if (data == 2)
                return data + 'nd';
            else if (data == 3)
                return data + 'rd';
            else
                return data + 'th';
        };
        var googleChartCallback = function(firstCall) {
            var sourceDatas = [['Date', 'Rank']];
            $.ajax({
                url: '/the-elite/games/@gameId/players/@Model.Id/ranking-history',
                data: {},
                type: "GET",
                dataType: "json",
                beforeSend: function () {
                    $("#whileLoadingBlock").show();
                    $("#bestPointsRanking").hide();
                    $("#bestTimeRanking").hide();
                    $("#highlights").hide();
                    $("#rankingHistory").hide();
                },
                success: function (data) {
                    if (data.message) {
                        if (!firstCall) {
                            alert(data.message);
                        }
                        return;
                    }

                    if (data.pointsRankHistory.length > 0) {
                        data.pointsRankHistory.forEach(item => sourceDatas.push([new Date(item.date), -parseInt(item.value)]));
                    } else {
                        sourceDatas.push([new Date('"' + @Model.DefaultFirstDate.ToString("yyyy-MM-dd") + '"'), -9999]);
                        sourceDatas.push([new Date('"' + @Model.DefaultLastDate.ToString("yyyy-MM-dd") + '"'), -9999]);
                    }

                    var tableDatas = google.visualization.arrayToDataTable(sourceDatas);
                    var options = {
                        width: 892,
                        height: 502,
                        chartArea: {
                            left: 15, top: 15, width: "95%", height: "90%"
                        },
                        legend: { position: 'none' }
                    };
                    new google.visualization
                        .LineChart(document.getElementById('rankingHistory'))
                        .draw(tableDatas, options);

                    var rh = $('#rankHighlights').find('tbody');
                    if (data.pointsRankHighlights.length > 0) {
                        data.pointsRankHighlights.forEach(item => {
                            rh.append('<tr><td>' + toYyyyMmDd(item.date) + '</td><td>' + toRank(item.value) + '</td></tr>');
                        });
                    } else {
                        rh.append('<tr><td colspan="2">No highlight!</td></tr>');
                    }

                    var ph = $('#pointsHighlights').find('tbody');
                    if (data.pointsHighlights.length > 0) {
                        data.pointsHighlights.forEach(item => {
                            ph.append('<tr><td>' + toYyyyMmDd(item.date) + '</td><td>' + item.value + '</td></tr>');
                        });
                    } else {
                        ph.append('<tr><td colspan="2">No highlight!</td></tr>');
                    }

                    if (data.bestPointsRanking) {
                        $('#bestPointsRanking').append('<label><span style="color: red">' + toRank(data.bestPointsRanking.pointsRank) + '</span> with <span style="color: gold">' + data.bestPointsRanking.points + '</span> points, the <span style="color: cornflowerblue">' + toYyyyMmDd(data.bestPointsRanking.date) + '</span></label>');
                    } else {
                        $('#bestPointsRanking').append('<label>N/A</label>');
                    }

                    if (data.bestTimeRanking) {
                        $('#bestTimeRanking').append('<label><span style="color: red">' + toRank(data.bestTimeRanking.timeRank) + '</span> with a time of <span style="color: gold">' + data.bestTimeRanking.timeString + '</span>, the <span style="color: cornflowerblue">' + toYyyyMmDd(data.bestPointsRanking.date) + '</span></label>');
                    } else {
                        $('#bestTimeRanking').append('<label>N/A</label>');
                    }

                    $("#whileLoadingBlock").hide();
                    $("#bestPointsRanking").show();
                    $("#bestTimeRanking").show();
                    $("#highlights").show();
                    $("#rankingHistory").show();
                },
                error: function (data) {
                    alert('Call error: ' + JSON.stringify(data));
                }
            });
        };
        google.charts.load('current', { packages: ['corechart'] });
        google.charts.setOnLoadCallback(() => googleChartCallback(true));
        document.getElementById('refreshDataSubmit').addEventListener("click", () => googleChartCallback(false), false);
    });
</script>