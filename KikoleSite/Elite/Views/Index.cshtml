@model KikoleSite.Elite.ViewDatas.IndexViewData

@if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
{
    <fieldset>
        <p style="color: red; font-size: larger">An error has occured:</p>
        <p>@Model.ErrorMessage</p>
        <p>If the message is technical, pease wait few minutes before trying again and/or contact the administrator.</p>
    </fieldset>
}

<button type="button" class="collapsible">Longest standing world records</button>
<div class="collapsiblecontent" style="display: none">
    <fieldset>
        <p>A view on longest standing times with several criteria; all times included (not just the top 10).</p>
    </fieldset>
    <form method="post" action="/the-elite/longest-standing-world-records">
        <div class="formBlock">
            <label class="formLabel" for="Game">Game:</label>
            @Html.DropDownListFor(m => m.Game,
                new[] {
                    new SelectListItem { Value = "1", Text = "GoldenEye" },
                    new SelectListItem { Value = "2", Text = "Perfect Dark" }
                },
                new { @id = "Game" })
        </div>
        <div class="formBlock">
            <label class="formLabel" for="StandingType">Standing type:</label>
            @Html.DropDownListFor(m => m.StandingType,
                new[] {
                    new SelectListItem { Value = "0", Text = "Longest standing untied (classic)" },
                    new SelectListItem { Value = "1", Text = "Longest while holding an UWR (can include multiple times)" },
                    new SelectListItem { Value = "2", Text = "Longest while holding a world record (single time)" },
                    new SelectListItem { Value = "3", Text = "Longest while holding a world record (multiple times)" },
                    new SelectListItem { Value = "4", Text = "Longest delay betweeen two ties (or between last tie and slay)" },
                    new SelectListItem { Value = "5", Text = "Longest standing (classic)" }
                },
                new { @id = "StandingType" })
        </div>
        <div class="formBlock">
            <label class="formLabel" for="Engine">Engine:</label>
            @Html.DropDownListFor(m => m.Engine,
                new[] {
                    new SelectListItem { Value = null, Text = "All" },
                    new SelectListItem { Value = "0", Text = "Unknown" },
                    new SelectListItem { Value = "1", Text = "NTSC" },
                    new SelectListItem { Value = "2", Text = "NTSC-J" },
                    new SelectListItem { Value = "3", Text = "PAL" }
                },
                new { @id = "Engine" })
        </div>
        <div class="formBlock">
            <label class="formLabel" for="playerSelection">Player:</label>
            @Html.HiddenFor(m => m.PlayerId, new { @id = "PlayerId" })
            <input type="text" id="playerSelection" name="playerSelection" />
            <span>(optional; type real name or surname)</span>
        </div>
        <div class="formBlock">
            <label class="formLabel" for="slayerPlayerSelection">Slay/Tied player:</label>
            @Html.HiddenFor(m => m.SlayerPlayerId, new { @id = "SlayerPlayerId" })
            <input type="text" id="slayerPlayerSelection" name="slayerPlayerSelection" />
            <span>(optional; type real name or surname)</span>
        </div>
        <div class="formBlock">
            <label class="formLabel" for="slayerPlayerSelection">Ongoing:</label>
            <label for="ongoing0">All</label>
            @Html.RadioButtonFor(m => m.StillOngoing, 0, new { @id = "ongoing0" })
            <label for="ongoing1">Yes</label>
            @Html.RadioButtonFor(m => m.StillOngoing, 1, new { @id = "ongoing1" })
            <label for="ongoingM1">No</label>
            @Html.RadioButtonFor(m => m.StillOngoing, -1, new { @id = "ongoingM1" })
        </div>
        <div class="formBlock">
            <label class="formLabel" for="RankingDate">At date:</label>
            @Html.EditorFor(m => m.RankingDate, new { @id = "RankingDate" })
            <span>(optional; default is now)</span>
        </div>
        <div class="formBlock">
            <label class="formLabel"></label>
            <input type="submit" value="Ok" />
        </div>
    </form>
</div>

<button type="button" class="collapsible">World records chronology</button>
<div class="collapsiblecontent" style="display: none">
    <fieldset>
        <p>A chronological view of world records, on every stage and every level, with several criteria.</p>
    </fieldset>
    <form method="post" action="/the-elite/world-records-chronology">
        <div class="formBlock">
            <label class="formLabel" for="Game">Game:</label>
            @Html.DropDownListFor(m => m.Game,
                new[] {
                    new SelectListItem { Value = "1", Text = "GoldenEye" },
                    new SelectListItem { Value = "2", Text = "Perfect Dark" }
                },
                new { @id = "Game" })
        </div>
        <div class="formBlock">
            <label class="formLabel" for="ChronologyType">Chronology type:</label>
            @Html.DropDownListFor(m => m.ChronologyType,
                new[] {
                    new SelectListItem { Value = "0", Text = "Untied world records" },
                    new SelectListItem { Value = "1", Text = "All world records" },
                    new SelectListItem { Value = "2", Text = "Unslay world records" },
                },
                new { @id = "ChronologyType" })
        </div>
        <div class="formBlock">
            <label class="formLabel" for="playerSelectionWrChronology">Player:</label>
            @Html.HiddenFor(m => m.PlayerId, new { @id = "PlayerIdWrChronology" })
            <input type="text" id="playerSelectionWrChronology" name="playerSelection" />
            <span>(optional; type real name or surname)</span>
        </div>
        <div class="formBlock">
            <label class="formLabel" for="Anonymise">Anonymise color:</label>
            @Html.CheckBoxFor(m => m.Anonymise, new { @id = "Anonymise" })
        </div>
        <div class="formBlock">
            <label class="formLabel"></label>
            <input type="submit" value="Ok" />
        </div>
    </form>
</div>

<button type="button" class="collapsible">Ranking / Leaderboard chronology</button>
<div class="collapsiblecontent" style="display: none">
    <fieldset>
        <p>A heat-mapped chronological view on leaderboard/ranking presence on each stage for a single player.</p>
    </fieldset>
    <form method="post" action="/the-elite/rankings-chronology">
        <div class="formBlock">
            <label class="formLabel" for="Game">Game:</label>
            @Html.DropDownListFor(m => m.Game,
                new[] {
                    new SelectListItem { Value = "1", Text = "GoldenEye" },
                    new SelectListItem { Value = "2", Text = "Perfect Dark" }
                },
                new { @id = "Game" })
        </div>
        <div class="formBlock">
            <label class="formLabel" for="ChronologyType">Chronology type:</label>
            @Html.DropDownListFor(m => m.ChronologyType,
                new[] {
                    new SelectListItem { Value = "3", Text = "Leaderboard heatmap" },
                    new SelectListItem { Value = "4", Text = "Ranking heatmap" }
                },
                new { @id = "ChronologyType" })
        </div>
        <div class="formBlock">
            <label class="formLabel" for="playerSelectionLeaderboardChronology">Player:</label>
            @Html.HiddenFor(m => m.PlayerId, new { @id = "PlayerIdLeaderboardChronology" })
            <input type="text" id="playerSelectionLeaderboardChronology" name="playerSelection" />
            <span>(mandatory; type real name or surname)</span>
        </div>
        <label class="formLabel" for="Anonymise">Anonymise color:</label>
        @Html.CheckBoxFor(m => m.Anonymise, new { @id = "Anonymise" })
        <div class="formBlock">
            <label class="formLabel"></label>
            <input type="submit" value="Ok" />
        </div>
    </form>
</div>

<button type="button" class="collapsible">Player's dystopia ranking</button>
<div class="collapsiblecontent" style="display: none">
    <fieldset>
        <p>A view on what the ranking could be for a player, with current times, at a given date in the past.</p>
    </fieldset>
    <form method="post" action="/the-elite/player-dystopia-rankings">
        <div class="formBlock">
            <label class="formLabel" for="Game">Game:</label>
            @Html.DropDownListFor(m => m.Game,
                new[] {
                    new SelectListItem { Value = "1", Text = "GoldenEye" },
                    new SelectListItem { Value = "2", Text = "Perfect Dark" }
                },
                new { @id = "Game" })
        </div>
        <div class="formBlock">
            <label class="formLabel" for="playerSelectionDystopia">Player:</label>
            @Html.HiddenFor(m => m.PlayerId, new { @id = "PlayerIdDystopia" })
            <input type="text" id="playerSelectionDystopia" name="playerSelection" />
            <span>(mandatory; type real name or surname)</span>
        </div>
        <div class="formBlock">
            <label class="formLabel" for="RankingDate">At date:</label>
            @Html.EditorFor(m => m.RankingDate, new { @id = "RankingDate" })
            <span>(optional; default is now, which is pointless in this scenario)</span>
        </div>
        <div class="formBlock">
            <label class="formLabel"></label>
            <input type="submit" value="Ok" />
        </div>
    </form>
</div>

<button type="button" class="collapsible">Engine ranking</button>
<div class="collapsiblecontent" style="display: none">
    <fieldset>
        <p>A view on ranking by engine.</p>
    </fieldset>
    <form method="post" action="/the-elite/engine-rankings">
        <div class="formBlock">
            <label class="formLabel" for="Game">Game:</label>
            @Html.DropDownListFor(m => m.Game,
                new[] {
                    new SelectListItem { Value = "1", Text = "GoldenEye" },
                    new SelectListItem { Value = "2", Text = "Perfect Dark" }
                },
                new { @id = "Game" })
        </div>
        <div class="formBlock">
            <label class="formLabel" for="Engine">Engine:</label>
            @Html.DropDownListFor(m => m.Engine,
                new[] {
                    new SelectListItem { Value = "0", Text = "Unknown" },
                    new SelectListItem { Value = "1", Text = "NTSC" },
                    new SelectListItem { Value = "2", Text = "NTSC-J" },
                    new SelectListItem { Value = "3", Text = "PAL" }
                },
                new { @id = "Engine" })
        </div>
        <div class="formBlock">
            <label class="formLabel" for="RankingDate">At date:</label>
            @Html.EditorFor(m => m.RankingDate, new { @id = "RankingDate" })
            <span>(optional; default is now)</span>
        </div>
        <div class="formBlock">
            <label class="formLabel"></label>
            <input type="submit" value="Ok" />
        </div>
    </form>
</div>

<button type="button" class="collapsible">Time frame ranking</button>
<div class="collapsiblecontent" style="display: none">
    <fieldset>
        <p>A view on ranking while including only times from a range of dates.</p>
    </fieldset>
    <form method="post" action="/the-elite/time-frame-rankings">
        <div class="formBlock">
            <label class="formLabel" for="Game">Game:</label>
            @Html.DropDownListFor(m => m.Game,
                new[] {
                    new SelectListItem { Value = "1", Text = "GoldenEye" },
                    new SelectListItem { Value = "2", Text = "Perfect Dark" }
                },
                new { @id = "Game" })
        </div>
        <div class="formBlock">
            <label class="formLabel" for="RankingStartDate">Starts at:</label>
            @Html.EditorFor(m => m.RankingStartDate, new { @id = "RankingStartDate" })
            <span>(mandatory; lower that the ending date)</span>
        </div>
        <div class="formBlock">
            <label class="formLabel" for="RankingDate">Ends at:</label>
            @Html.EditorFor(m => m.RankingDate, new { @id = "RankingDate" })
            <span>(optional; default is now)</span>
        </div>
        <div class="formBlock">
            <label class="formLabel"></label>
            <input type="submit" value="Ok" />
        </div>
    </form>
</div>

<button type="button" class="collapsible">Countries ranking</button>
<div class="collapsiblecontent" style="display: none">
    <fieldset>
        <p>A view on ranking for a specific country, or ranking between countries.</p>
    </fieldset>
    <form method="post" action="/the-elite/country-rankings">
        <div class="formBlock">
            <label class="formLabel" for="Game">Game:</label>
            @Html.DropDownListFor(m => m.Game,
                new[] {
                    new SelectListItem { Value = "1", Text = "GoldenEye" },
                    new SelectListItem { Value = "2", Text = "Perfect Dark" }
                },
                new { @id = "Game" })
        </div>
        <div class="formBlock">
            <label class="formLabel" for="Country">Country:</label>
            @Html.DropDownListFor(m => m.Country,
                Model.Countries,
                new { @id = "Country" })
            <span>(empty to rank countries themselves)</span>
        </div>
        <div class="formBlock">
            <label class="formLabel" for="RankingDate">At date:</label>
            @Html.EditorFor(m => m.RankingDate, new { @id = "RankingDate" })
            <span>(optional; default is now)</span>
        </div>
        <div class="formBlock">
            <label class="formLabel"></label>
            <input type="submit" value="Ok" />
        </div>
    </form>
</div>

<style>
    .formLabel {
        width: 100px;
        display: inline-block;
        text-align: right;
        margin-right: 5px;
    }

    .formBlock {
        margin-top: 5px;
        margin-bottom: 5px;
        height: 30px;
    }

    /* Style the button that is used to open and close the collapsible content */
    .collapsible {
        cursor: pointer;
        padding: 5px;
        margin-top: 5px;
        margin-bottom: 5px;
        width: 100%;
        border: none;
        text-align: left;
        outline: none;
        font-size: 12px;
        color: white;
        background-color: #333;
    }

        /* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
        .active, .collapsible:hover {
            background-color: #808080;
        }

    /* Style the collapsible content. Note: hidden by default */
    .collapsiblecontent {
        padding: 0 5px;
        display: none;
        overflow: hidden;
    }
</style>
<script>
    $(function () {
        autocompletePlayers("#playerSelection", "#PlayerId");
        autocompletePlayers("#playerSelectionDystopia", "#PlayerIdDystopia");
        autocompletePlayers("#playerSelectionWrChronology", "#PlayerIdWrChronology");
        autocompletePlayers("#playerSelectionLeaderboardChronology", "#PlayerIdLeaderboardChronology");
        autocompletePlayers("#slayerPlayerSelection", "#SlayerPlayerId");

        var coll = document.getElementsByClassName("collapsible");
        for (var i = 0; i < coll.length; i++) {
            coll[i].addEventListener("click", function () {
                this.classList.toggle("active");
                var content = this.nextElementSibling;
                if (content.style.display === "block") {
                    content.style.display = "none";
                } else {
                    content.style.display = "block";
                }
            });
        }
    });
    var autocompletePlayers = function (textId, hiddenId) {
        $(textId).blur(function () {
            if ($(this).val() == "") {
                $(hiddenId).val("");
            }
        });
        $(textId).autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/the-elite/player-filter/',
                    data: {
                        "pattern": request.term
                    },
                    type: "POST",
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.name,
                                value: item.id
                            };
                        }))
                    },
                    error: function (data) {
                        alert('Call error: ' + JSON.stringify(data));
                    }
                });
            },
            select: function (e, i) {
                $(hiddenId).val(i.item.value);
                $(textId).val(i.item.label);
                return false;
            },
            minLength: 3
        });
    };
</script>