<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountMandatory" xml:space="preserve">
    <value>Le compte est nécessaire pour jouer, mais il prend 10 secondes à créer et aucune information personnelle n'est requise !</value>
  </data>
  <data name="BirthYearTitle" xml:space="preserve">
    <value>Année de naissance :</value>
  </data>
  <data name="CareerClubSoFar" xml:space="preserve">
    <value>Carrière en club :</value>
  </data>
  <data name="ChallengeOngoing" xml:space="preserve">
    <value>Vous avez un challenge contre &lt;span style="color: crimson"&gt;{0}&lt;/span&gt; aujourd'hui, pour &lt;span style="color: crimson"&gt;{1}&lt;/span&gt;% de vos points !</value>
  </data>
  <data name="ClubsTitle" xml:space="preserve">
    <value>Clubs :</value>
  </data>
  <data name="ClubTipOne" xml:space="preserve">
    <value>Triés du plus ancien au plus récent</value>
  </data>
  <data name="ClubTipTwo" xml:space="preserve">
    <value>Pas de doublon quand le joueur revient dans un club qu'il a déjà connu</value>
  </data>
  <data name="ComeBackTomorrow" xml:space="preserve">
    <value>Revenez demain pour un nouveau joueur !</value>
  </data>
  <data name="CurrentDay" xml:space="preserve">
    <value>Jour courant</value>
  </data>
  <data name="CurrentScore" xml:space="preserve">
    <value>Votre score actuel : &lt;span style="font-style: italic; color:crimson"&gt;{0}&lt;/span&gt; points.</value>
  </data>
  <data name="DayClue" xml:space="preserve">
    <value>Indice du jour :</value>
  </data>
  <data name="FinalScore" xml:space="preserve">
    <value>Votre score final : &lt;span style="font-style: italic; color:crimson"&gt;{0}&lt;/span&gt; points.</value>
  </data>
  <data name="LoggedAs" xml:space="preserve">
    <value>Vous êtes connecté en tant que</value>
  </data>
  <data name="NationalityTitle" xml:space="preserve">
    <value>Nationalité :</value>
  </data>
  <data name="NextDay" xml:space="preserve">
    <value>Jour suivant</value>
  </data>
  <data name="OneClubAtATime" xml:space="preserve">
    <value>un club à la fois</value>
  </data>
  <data name="PendingChallenges" xml:space="preserve">
    <value>Vous avez des challenges en attente d'une &lt;a href="/Challenge"&gt;réponse&lt;/a&gt;.</value>
  </data>
  <data name="PlayerFoundCongrats" xml:space="preserve">
    <value>Félicitations ! Le joueur était &lt;span style="font-style: italic; color:crimson"&gt;{0}&lt;/span&gt;.</value>
  </data>
  <data name="PlayerIs" xml:space="preserve">
    <value>Le joueur du jour est</value>
  </data>
  <data name="PointsIfIncorrect" xml:space="preserve">
    <value>pts si incorrect</value>
  </data>
  <data name="PositionTitle" xml:space="preserve">
    <value>Position :</value>
  </data>
  <data name="PreviousDay" xml:space="preserve">
    <value>Jour précédent</value>
  </data>
  <data name="SubmittedBy" xml:space="preserve">
    <value>Le joueur du jour a été proposé par  &lt;span style="color: crimson"&gt;{0}&lt;/span&gt; !</value>
  </data>
  <data name="TipAboutNationality" xml:space="preserve">
    <value>nationalité, et non pas la sélection pour laquelle il joue</value>
  </data>
  <data name="TypePlayerName" xml:space="preserve">
    <value>Saisissez le nom du joueur ici :</value>
  </data>
  <data name="UseWikiTitle" xml:space="preserve">
    <value>conseil: saisissez le titre de la page Wiki en anglais du joueur</value>
  </data>
  <data name="YouAreNotLogged" xml:space="preserve">
    <value>Vous n'êtes &lt;a href="/Account"&gt;&lt;span style="color: crimson"&gt;pas identifié&lt;/span&gt;&lt;/a&gt;</value>
  </data>
  <data name="PlayerWas" xml:space="preserve">
    <value>Le joueur du {1} était &lt;span style="font-style: italic; color:crimson"&gt;{0}&lt;/span&gt;.</value>
  </data>
  <data name="AlmostThere" xml:space="preserve">
    <value>Si proche du but ! Il vous manque cependant quelque chose pour être à 100%...</value>
  </data>
  <data name="EasyDayClue" xml:space="preserve">
    <value>Indice facile du jour :</value>
  </data>
  <data name="Points" xml:space="preserve">
    <value>pts</value>
  </data>
  <data name="NeedAnotherClue" xml:space="preserve">
    <value>J'ai besoin d'un autre indice</value>
  </data>
  <data name="CreateClubIsGood" xml:space="preserve">
    <value>Si l'absence du club élimine des joueurs potentiels, ajouter le club peut rendre le jeu plus difficile pour vos adversaires !</value>
  </data>
  <data name="HelpToCreateClub" xml:space="preserve">
    <value>Ajouter un club à la base de données</value>
  </data>
  <data name="NewTab" xml:space="preserve">
    <value>nouvel onglet</value>
  </data>
</root>