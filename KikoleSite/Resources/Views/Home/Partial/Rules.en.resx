<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutClubs" xml:space="preserve">
    <value>About clubs</value>
  </data>
  <data name="AboutClubsDetails" xml:space="preserve">
    <value>&lt;p&gt;Only professional clubs are included in the player's career: youth clubs and "B" teams are excluded.&lt;/p&gt;
&lt;p&gt;Exemple : Edouard Mendy hasn't played for "Olympique de Marseille" (B team), neither at "Le Havre" (youth).&lt;/p&gt;
&lt;p&gt;Loans are included in the career, and explicitely indicated when it occurs.&lt;/p&gt;
&lt;p&gt;The autocompletion is comprehensive. Meaning if you search a particular club and it doesn't appear, then the current player has not played in this club.&lt;/p&gt;</value>
  </data>
  <data name="AboutCountry" xml:space="preserve">
    <value>About the nationality</value>
  </data>
  <data name="AboutCountryDetails" xml:space="preserve">
    <value>&lt;p&gt;The game does not manage sportive nationality. Only administratives nationalities are considered, based on &lt;a target="_blank" href="https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes"&gt;this norm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Exemple : Ryan Giggs's nationality is "United Kingdom" and not "Wales".&lt;/p&gt;
&lt;p&gt;There's only one nationality per player. When the sportive nationality matches the administrative nationalité, it's the one chosen.&lt;/p&gt;
&lt;p&gt;It's possible, although very rare, that the choice is arbitrary by the administrator. Here's several complex cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Edouard Mendy is Senegalese, as he has chosen this federation; this case is legit as it respects the rule above.&lt;/li&gt;
&lt;li&gt;Jean-Claude Darcheville is French: choice made by the administrator, due to the fact that the Guyane's federation is not recognized by the FIFA.&lt;/li&gt;
&lt;li&gt;Xavi Simons is Dutch: choice made by the administrator at the current date, it might still possible for him to pick the Spanish selection.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, nationalities from the past are substitued by closest current nationalities (which might be arbitrary once again).&lt;/p&gt;
&lt;p&gt;Exemple : Lev Yachine is Russian, because "Soviet Union" is not available.&lt;/p&gt;</value>
  </data>
  <data name="BadGuessClub" xml:space="preserve">
    <value>An incorrect club proposition costs &lt;span style="color: crimson; font-size: large"&gt;{0}&lt;/span&gt; points.</value>
  </data>
  <data name="BadGuessCountry" xml:space="preserve">
    <value>An incorrect country proposition costs &lt;span style="color: crimson; font-size: large"&gt;{0}&lt;/span&gt; points.</value>
  </data>
  <data name="BadGuessName" xml:space="preserve">
    <value>An incorrect player proposition costs &lt;span style="color: crimson; font-size: large"&gt;{0}&lt;/span&gt; points.</value>
  </data>
  <data name="BadGuessPosition" xml:space="preserve">
    <value>An incorrect position proposition costs &lt;span style="color: crimson; font-size: large"&gt;{0}&lt;/span&gt; points.</value>
  </data>
  <data name="BadGuessYear" xml:space="preserve">
    <value>An incorrect year proposition costs &lt;span style="color: crimson; font-size: large"&gt;{0}&lt;/span&gt; points.</value>
  </data>
  <data name="ClueGuess" xml:space="preserve">
    <value>Asking for a second clue costs &lt;span style="color: crimson; font-size: large"&gt;{0}&lt;/span&gt; % of points.</value>
  </data>
  <data name="GoodGuess" xml:space="preserve">
    <value>A good guess on any category costs &lt;span style="color: forestgreen; font-size: large"&gt;no points&lt;/span&gt;.</value>
  </data>
  <data name="Rules" xml:space="preserve">
    <value>&lt;p&gt;&lt;span style="color: crimson; font-size: large"&gt;"Kikole?"&lt;/span&gt; is a game where you have to guess a new football player &lt;span style="color: crimson"&gt;every day&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Your opponents have the same player to guess, so be the best and you'll appear on our &lt;a href="/Leaderboard"&gt;leaderboard&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;To find the player of the day, you can suggest his position, nationality, clubs or birth year. A starter clue is also given.&lt;/p&gt;
&lt;p&gt;Notice that the player can be active or retired, moreover feminine players are possible but quite rare.&lt;/p&gt;
&lt;p&gt;Fictional players (movies and such) are disallowed.&lt;/p&gt;
&lt;p&gt;In case of technical issue, complaint or to suggest a player (another way to gain points), please &lt;a href="/Home/Contact"&gt;contact me&lt;/a&gt; (authentication required).&lt;/p&gt;</value>
  </data>
  <data name="ScoreIntro" xml:space="preserve">
    <value>Score is computed with following rules:</value>
  </data>
  <data name="StarterPoints" xml:space="preserve">
    <value>You start with &lt;span style="color: forestgreen; font-size: large"&gt;{0}&lt;/span&gt; points.</value>
  </data>
</root>