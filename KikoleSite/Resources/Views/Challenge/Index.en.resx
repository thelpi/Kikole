<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Accept" xml:space="preserve">
    <value>Accept</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Challenge" xml:space="preserve">
    <value>Challenge</value>
  </data>
  <data name="ChallengeAgainst" xml:space="preserve">
    <value>You have a challenge against &lt;span style="color: crimson"&gt;{0}&lt;/span&gt; today, for &lt;span style="color: crimson"&gt;{1}&lt;/span&gt;% of your points!</value>
  </data>
  <data name="ChallengeHistory" xml:space="preserve">
    <value>Challenges history</value>
  </data>
  <data name="ChallengeLaius" xml:space="preserve">
    <value>&lt;p&gt;You target an opponent you think you can &lt;span style="color:crimson"&gt;beat&lt;/span&gt; (ie more points than him/her).&lt;/p&gt;
&lt;p&gt;You have to set the percentage of points you &lt;span style="color:crimson"&gt;gamble&lt;/span&gt; in the challenge (see example below).&lt;/p&gt;
&lt;p&gt;If he/she accepts the challenge, you're on!&lt;/p&gt;
&lt;p&gt;The challenge is scheduled for the next day where you and your opponent are free of any other challenge.&lt;/p&gt;
&lt;p&gt;Also, challenge cannot occurs a day where you or your opponent have submitted the daily player.&lt;/p&gt;
&lt;p&gt;In case of withdrawal (ie the opponent don't find the player in time), the winner double his score, loser lose the same amount.&lt;/p&gt;
&lt;p&gt;If both users withdraw, have the same score, or have both 0 points, nothing happens.&lt;/p&gt;
&lt;p&gt;Example of score:&lt;/p&gt;
&lt;p&gt;user X challenges Y for 40% of his/her score&lt;/p&gt;
&lt;p&gt;The next day, X scores 800 points and Y 900 points, so Y wins.&lt;/p&gt;
&lt;p&gt;Y final score is 1260 points (900 + 900 * 0.4)&lt;/p&gt;
&lt;p&gt;X final score is 440 points (800 - 900 * 0.4)&lt;/p&gt;</value>
  </data>
  <data name="ChallengeOppose" xml:space="preserve">
    <value>Opponents who have requested to challenge you</value>
  </data>
  <data name="ChallengeProgress" xml:space="preserve">
    <value>Challenge in progress</value>
  </data>
  <data name="ChallengeRequest" xml:space="preserve">
    <value>Challenges you've requested</value>
  </data>
  <data name="ChallengeResume" xml:space="preserve">
    <value>{0} for {1}% of points</value>
  </data>
  <data name="ChallengeSchedule" xml:space="preserve">
    <value>Scheduled challenges</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="DoChallenge" xml:space="preserve">
    <value>Challenge someone</value>
  </data>
  <data name="GambleTip" xml:space="preserve">
    <value>% of your points you're willing to gamble</value>
  </data>
  <data name="HowToChallenge" xml:space="preserve">
    <value>How challenge works?</value>
  </data>
  <data name="Initiated" xml:space="preserve">
    <value>Initiated?</value>
  </data>
  <data name="NoChallengeHistory" xml:space="preserve">
    <value>You have no history of challenges!</value>
  </data>
  <data name="NoChallengeOppose" xml:space="preserve">
    <value>Nobody has requested to challenge you</value>
  </data>
  <data name="NoChallengeRequest" xml:space="preserve">
    <value>You've challenged nobody</value>
  </data>
  <data name="NoChallengeSchedule" xml:space="preserve">
    <value>No challenge are scheduled</value>
  </data>
  <data name="NoChallengeToday" xml:space="preserve">
    <value>No challenge today.</value>
  </data>
  <data name="Opponent" xml:space="preserve">
    <value>Opponent</value>
  </data>
  <data name="OpponentSet" xml:space="preserve">
    <value>Opponent:</value>
  </data>
  <data name="PointsRate" xml:space="preserve">
    <value>Points rate:</value>
  </data>
  <data name="Refuse" xml:space="preserve">
    <value>Refuse</value>
  </data>
  <data name="Results" xml:space="preserve">
    <value>Result</value>
  </data>
</root>